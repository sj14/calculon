package io.github.sj14.calculon;

import java.awt.ComponentOrientation;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import net.objecthunter.exp4j.ExpressionBuilder;

public class Calculon extends javax.swing.JFrame {

    public Calculon() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightClickMenu = new javax.swing.JPopupMenu();
        cutMenuItem1 = new javax.swing.JMenuItem();
        copyMenuItem1 = new javax.swing.JMenuItem();
        pasteMenuItem1 = new javax.swing.JMenuItem();
        splitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        expressionsTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTextPane = new javax.swing.JTextPane();
        statusBar = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        cutMenuItem1.setMnemonic('t');
        cutMenuItem1.setText("Cut");
        cutMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItem1ActionPerformed(evt);
            }
        });
        rightClickMenu.add(cutMenuItem1);

        copyMenuItem1.setMnemonic('y');
        copyMenuItem1.setText("Copy");
        copyMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItem1ActionPerformed(evt);
            }
        });
        rightClickMenu.add(copyMenuItem1);

        pasteMenuItem1.setMnemonic('p');
        pasteMenuItem1.setText("Paste");
        pasteMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItem1ActionPerformed(evt);
            }
        });
        rightClickMenu.add(pasteMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculon");

        splitPane.setDividerLocation(250);
        splitPane.setDividerSize(3);

        expressionsTextPane.setFont(expressionsTextPane.getFont().deriveFont((float)14));
        expressionsTextPane.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                expressionsTextPaneCaretUpdate(evt);
            }
        });
        expressionsTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                expressionsTextPaneMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(expressionsTextPane);

        splitPane.setLeftComponent(jScrollPane1);

        resultsTextPane.setEditable(false);
        resultsTextPane.setFont(resultsTextPane.getFont().deriveFont((float)14));
        jScrollPane2.setViewportView(resultsTextPane);

        splitPane.setRightComponent(jScrollPane2);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(statusBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        saveHistory(expressionsTextPane.getText().strip());
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void expressionsTextPaneCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_expressionsTextPaneCaretUpdate
        setResults();
    }//GEN-LAST:event_expressionsTextPaneCaretUpdate

    private void cutMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItem1ActionPerformed
        expressionsTextPane.cut();
    }//GEN-LAST:event_cutMenuItem1ActionPerformed

    private void copyMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItem1ActionPerformed
        expressionsTextPane.copy();
    }//GEN-LAST:event_copyMenuItem1ActionPerformed

    private void pasteMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItem1ActionPerformed
        expressionsTextPane.paste();
    }//GEN-LAST:event_pasteMenuItem1ActionPerformed

    private void expressionsTextPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expressionsTextPaneMouseReleased
        if (evt.isPopupTrigger()) {
            rightClickMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_expressionsTextPaneMouseReleased

    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        Calculon app = new Calculon();

        try {
            List<String> read = Files.readAllLines(historyPath());
            StringBuilder oldHistory = new StringBuilder();
            for (String h : read) {
                oldHistory.append(h).append(System.lineSeparator());
            }
            oldHistory.setLength(oldHistory.length() - 1); // remove last line break
            app.expressionsTextPane.setText(oldHistory.toString());
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                app.setResults();
                app.resultsTextPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
                app.statusBar.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
                app.pack();
                app.setLocationRelativeTo(null);
                app.setVisible(true);
            }
        });

        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                saveHistory(app.expressionsTextPane.getText().strip());
            }
        });
    }

    private static void saveHistory(String content) {
        try (PrintWriter out = new PrintWriter(historyPath().toString())) {
            out.println(content);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setResults() {
        // needs to be "\n" instead of  System.lineSeparator() as sometimes it 
        // only adds "\n" instead of "\n\r" on windows too and then it won't match.
        String[] expressionsArray = expressionsTextPane.getText().split("\n");

        double sum = 0;
        int entries = 0;
        StringBuilder results = new StringBuilder();

        for (String expression : expressionsArray) {
            expression = expression.strip();

            try {
                double evaluated = new ExpressionBuilder(expression).build().evaluate();
                results.append(evaluated).append(System.lineSeparator());
                sum += evaluated;
                entries++;
            } catch (Exception e) {
                // keep lines in sync when calculation not possible
                results.append(System.lineSeparator());
            }
        }
        resultsTextPane.setText(results.toString());
        statusBar.setText(String.format("entries: %d sum: %.2f", entries, sum));
    }

    private static Path historyPath() {
        // get calculon config directory

        // TODO: config not XDG compliant as it can be variable!
        Path path = Paths.get(System.getProperty("user.home"), ".config");

        if (System.getProperty("os.name").contains("Windows")) {
            path = Paths.get(System.getenv("APPDATA"), "calculon");
        }

        // create directories
        try {
            Files.createDirectories(Paths.get(path.toString()));
        } catch (IOException ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        // add filename
        return Paths.get(path.toString(), "calculon.txt");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem copyMenuItem1;
    private javax.swing.JMenuItem cutMenuItem1;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextPane expressionsTextPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem1;
    private javax.swing.JTextPane resultsTextPane;
    private javax.swing.JPopupMenu rightClickMenu;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JLabel statusBar;
    // End of variables declaration//GEN-END:variables
}
