package io.github.sj14.calculon;

import java.awt.ComponentOrientation;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import net.objecthunter.exp4j.ExpressionBuilder;

public class Calculon extends javax.swing.JFrame {

    public Calculon() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        expressionsTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        statusBar = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculon");

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(3);

        expressionsTextArea.setColumns(1);
        expressionsTextArea.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        expressionsTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                expressionsTextAreaFocusGained(evt);
            }
        });
        expressionsTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                expressionsTextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(expressionsTextArea);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 23));

        resultsTextArea.setEditable(false);
        resultsTextArea.setColumns(1);
        resultsTextArea.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(resultsTextArea);
        resultsTextArea.getAccessibleContext().setAccessibleName("");

        jSplitPane1.setRightComponent(jScrollPane2);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(statusBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void expressionsTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expressionsTextAreaKeyReleased
        setResults();
    }//GEN-LAST:event_expressionsTextAreaKeyReleased

    private void expressionsTextAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_expressionsTextAreaFocusGained
        setResults();
    }//GEN-LAST:event_expressionsTextAreaFocusGained

    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        Calculon app = new Calculon();

        try {
            List<String> read = Files.readAllLines(historyPath());
            StringBuilder oldHistory = new StringBuilder();
            for (String h : read) {
                oldHistory.append(h).append(System.lineSeparator());
            }
            oldHistory.setLength(oldHistory.length() - 1); // remove last line break
            app.expressionsTextArea.setText(oldHistory.toString());
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                app.resultsTextArea.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
                app.statusBar.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
                app.pack();
                app.setLocationRelativeTo(null);
                app.setVisible(true);
            }
        });

        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                try (PrintWriter out = new PrintWriter(historyPath().toString())) {
                    out.println(app.expressionsTextArea.getText().strip());
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void setResults() {
        // needs to be "\n" instead of  System.lineSeparator() as sometimes it 
        // only adds "\n" instead of "\n\r" on windows too and then it won't match.
        String[] expressionsArray = expressionsTextArea.getText().split("\n");

        double sum = 0;
        int entries = 0;
        StringBuilder results = new StringBuilder();

        for (String expression : expressionsArray) {
            expression = expression.strip();

            try {
                double evaluated = new ExpressionBuilder(expression).build().evaluate();
                results.append(evaluated).append(System.lineSeparator());
                sum += evaluated;
                entries++;
            } catch (Exception e) {
                // keep lines in sync when calculation not possible
                results.append(System.lineSeparator());
            }
        }
        resultsTextArea.setText(results.toString());
        statusBar.setText(String.format("entries: %d sum: %.2f", entries, sum));
    }

    private static Path historyPath() {
        // get calculon config directory

        // TODO: config not XDG compliant as it can be variable!
        Path path = Paths.get(System.getProperty("user.home"), ".config");

        if (System.getProperty("os.name").contains("Windows")) {
            path = Paths.get(System.getenv("APPDATA"), "calculon");
        }

        // create directories
        try {
            Files.createDirectories(Paths.get(path.toString()));
        } catch (IOException ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        // add filename
        return Paths.get(path.toString(), "calculon.txt");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextArea expressionsTextArea;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel statusBar;
    // End of variables declaration//GEN-END:variables
}
