package io.github.sj14.calculon;

import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.JTextComponent;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import net.objecthunter.exp4j.ExpressionBuilder;

public class Calculon extends javax.swing.JFrame {

    public Calculon() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightClickMenuExpressions = new javax.swing.JPopupMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        rightClickMenuResults = new javax.swing.JPopupMenu();
        copyItemResults = new javax.swing.JMenuItem();
        splitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        expressionsTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTextPane = new javax.swing.JTextPane();
        statusBar = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        undoMenuItem.setText("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        rightClickMenuExpressions.add(undoMenuItem);

        redoMenuItem.setText("Redo");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        rightClickMenuExpressions.add(redoMenuItem);

        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        rightClickMenuExpressions.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        rightClickMenuExpressions.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        rightClickMenuExpressions.add(pasteMenuItem);

        copyItemResults.setText("Copy");
        copyItemResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemResultsActionPerformed(evt);
            }
        });
        rightClickMenuResults.add(copyItemResults);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculon");

        splitPane.setDividerLocation(170);
        splitPane.setDividerSize(3);

        expressionsTextPane.setFont(expressionsTextPane.getFont().deriveFont((float)14));
        expressionsTextPane.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                expressionsTextPaneCaretUpdate(evt);
            }
        });
        expressionsTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                expressionsTextPaneMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(expressionsTextPane);

        splitPane.setLeftComponent(jScrollPane1);

        resultsTextPane.setEditable(false);
        resultsTextPane.setFont(resultsTextPane.getFont().deriveFont((float)14));
        resultsTextPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultsTextPaneMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(resultsTextPane);

        splitPane.setRightComponent(jScrollPane2);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, SHORTCUT_MODIFIER));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(statusBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        saveHistory(expressionsTextPane.getText().strip());
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void expressionsTextPaneCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_expressionsTextPaneCaretUpdate
        setResults();
    }//GEN-LAST:event_expressionsTextPaneCaretUpdate

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        expressionsTextPane.cut();
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        expressionsTextPane.copy();
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        expressionsTextPane.paste();
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void expressionsTextPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expressionsTextPaneMouseReleased
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            rightClickMenuExpressions.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_expressionsTextPaneMouseReleased

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        try {
            undoManager.undo();
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        try {
            undoManager.redo();
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_redoMenuItemActionPerformed

    private void copyItemResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemResultsActionPerformed
        resultsTextPane.copy();
    }//GEN-LAST:event_copyItemResultsActionPerformed

    private void resultsTextPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTextPaneMouseReleased
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            rightClickMenuResults.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_resultsTextPaneMouseReleased

    private static final UndoManager undoManager = new UndoManager();
    private static final int SHORTCUT_MODIFIER = Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx();

    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        Calculon app = new Calculon();
        readHistory(app.expressionsTextPane);
        initUndoManager(app.expressionsTextPane);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                app.setResults();
                app.resultsTextPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
                app.statusBar.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
                app.pack();
                app.setLocationRelativeTo(null);
                app.setVisible(true);
            }
        });

        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                saveHistory(app.expressionsTextPane.getText().strip());
            }
        });
    }

    private static void readHistory(JTextComponent textComponent) {
        try {
            List<String> read = Files.readAllLines(historyPath());
            StringBuilder oldHistory = new StringBuilder();
            for (String h : read) {
                oldHistory.append(h).append(System.lineSeparator());
            }
            oldHistory.setLength(oldHistory.length() - 1); // remove last line break
            textComponent.setText(oldHistory.toString());
        } catch (Exception ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // https://stackoverflow.com/a/24438161
    private static void initUndoManager(JTextComponent textComponent) {
        textComponent.getDocument().addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.addEdit(e.getEdit());
            }
        });

        textComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, SHORTCUT_MODIFIER), "Undo");

        textComponent.getActionMap().put("Undo", new AbstractAction("Undo") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (undoManager.canUndo()) {
                        undoManager.undo();
                    }
                } catch (CannotUndoException e) {
                    System.out.println(e);
                }
            }
        });

        textComponent.getActionMap().put("Redo", new AbstractAction("Redo") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (undoManager.canRedo()) {
                        undoManager.redo();
                    }
                } catch (CannotRedoException e) {
                    System.out.println(e);
                }
            }
        });
        textComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, SHORTCUT_MODIFIER), "Redo");
    }

    private static void saveHistory(String content) {
        try (PrintWriter out = new PrintWriter(historyPath().toString())) {
            out.println(content);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setResults() {
        // needs to be "\n" instead of  System.lineSeparator() as sometimes it 
        // only adds "\n" instead of "\n\r" on windows too and then it won't match.
        String[] expressionsArray = expressionsTextPane.getText().split("\n");

        StringBuilder results = new StringBuilder();

        Style styleBlack = expressionsTextPane.addStyle("black", null);
        StyleConstants.setForeground(styleBlack, Color.black);

        Style styleGray = expressionsTextPane.addStyle("gray", null);
        StyleConstants.setForeground(styleGray, Color.gray);

        Runnable doHighlight = new Runnable() {
            @Override
            public void run() {
                double sum = 0;
                int entries = 0;
                int charsIndex = 0;

                for (String expressionWithWhitespaces : expressionsArray) {
                    String expression = expressionWithWhitespaces.strip();

                    try {
                        double evaluated = new ExpressionBuilder(expression).build().evaluate();
                        results.append(evaluated).append(System.lineSeparator());
                        sum += evaluated;
                        entries++;
                        expressionsTextPane.getStyledDocument().setCharacterAttributes(charsIndex, expression.length(), styleBlack, rootPaneCheckingEnabled);
                    } catch (Exception e) {
                        // keep lines in sync when calculation not possible
                        results.append(System.lineSeparator());
                        expressionsTextPane.getStyledDocument().setCharacterAttributes(charsIndex, expression.length(), styleGray, rootPaneCheckingEnabled);
                    }

                    charsIndex += expressionWithWhitespaces.length() + 2 - System.lineSeparator().length(); // the +2-lineSeperator makes it work for Windows and Mac
                }
                resultsTextPane.setText(results.toString());
                statusBar.setText(String.format("entries: %d sum: %.2f", entries, sum));
            }
        };
        SwingUtilities.invokeLater(doHighlight);
    }

    private static Path historyPath() {
        // get calculon config directory

        // TODO: config not XDG compliant as it can be variable!
        Path path = Paths.get(System.getProperty("user.home"), ".config");

        if (System.getProperty("os.name").contains("Windows")) {
            path = Paths.get(System.getenv("APPDATA"), "calculon");
        }

        // create directories
        try {
            Files.createDirectories(Paths.get(path.toString()));
        } catch (IOException ex) {
            Logger.getLogger(Calculon.class.getName()).log(Level.SEVERE, null, ex);
        }

        // add filename
        return Paths.get(path.toString(), "calculon.txt");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem copyItemResults;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextPane expressionsTextPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JTextPane resultsTextPane;
    private javax.swing.JPopupMenu rightClickMenuExpressions;
    private javax.swing.JPopupMenu rightClickMenuResults;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JLabel statusBar;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables
}
